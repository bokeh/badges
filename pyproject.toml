[build-system]
requires = ["setuptools>=64", "types-requests"]
build-backend = "setuptools.build_meta"

[project]
name = "generate-conda-badges"
version = "0.1"
description = "Generate shields.io badge URLs for monthly conda downloads"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "click",
    "dask[dataframe]",
    "pyarrow",
    "requests",
    "s3fs",
]
authors = [
  {email = "info@bokeh.org"},
  {name = "Bokeh Team"}
]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Topic :: Utilities",
]

[project.urls]
repository = "https://github.com/bokeh/badges"

[project.scripts]
generate-conda-badges = "generate_badges.conda.__main__:main"
generate-so-badges = "generate_badges.stackoverflow.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.coverage.run]
source = ["generate_badges"]

[tool.isort]
force_grid_wrap = 4
multi_line_output = 3
combine_as_imports = true

indented_import_headings = false
include_trailing_comma = true

import_heading_stdlib = "Standard library imports"
import_heading_thirdparty = "External imports"
import_heading_firstparty = ""
import_heading_localfolder = ""

known_first_party = "generate_badges"
known_third_party= ["click", "dask", "requests", "s3fs"]

[tool.mypy]
python_version = "3.10"
files = ["src/generate-conda-badges", "tests"]

strict = true

# https://github.com/pallets/click/issues/1879
disallow_untyped_decorators = false

pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

disallow_any_unimported = true
implicit_reexport = true
namespace_packages = true
warn_return_any = false
warn_unreachable = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]
